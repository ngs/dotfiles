.\" Generated with Ronnjs 0.4.0
.\" http://github.com/kapouer/ronnjs
.
.TH "JSLINT" "1" "October 2014" "" ""
.
.SH "NAME"
\fBjslint\fR \-\- a code quality tool
.
.SH "SYNOPSIS"
jslint\.js [\-\-ass] [\-\-bitwise] [\-\-browser] [\-\-closure] [\-\-color] [\-\-config] [\-\-continue] [\-\-couch] [\-\-debug] [\-\-devel] [\-\-eqeq] [\-\-evil] [\-\-forin] [\-\-indent] [\-\-json] [\-\-maxerr] [\-\-maxlen] [\-\-newcap] [\-\-node] [\-\-nomen] [\-\-passfail] [\-\-plusplus] [\-\-predef] [\-\-properties] [\-\-regexp] [\-\-rhino] [\-\-sloppy] [\-\-stupid] [\-\-sub] [\-\-terse] [\-\-todo] [\-\-unparam] [\-\-vars] [\-\-version] [\-\-white] [\-\-] <scriptfile>\.\.\.
.
.SH "DESCRIPTION"
JSLint is a static analysis tool to locate and correct style problems in Javascript (ECMAScript etc\.) source code\.
.
.SH "META OPTIONS"
  \fB\-\-color\fR     write output in color
.
.P
  \fB\-\-terse\fR     report one error per line with parseable source file/line
.
.P
  \fB\-\-json\fR      output in JSON format
.
.P
  \fB\-\-version\fR   print version and exit
.
.SH "LINTING OPTIONS"
  \fB\-\-ass\fR       Tolerate assignment expressions
.
.P
  \fB\-\-bitwise\fR   Tolerate bitwise operators
.
.P
  \fB\-\-browser\fR   Assume a browser
.
.P
  \fB\-\-closure\fR   Tolerate Google Closure idioms
.
.P
  \fB\-\-continue\fR  Tolerate continue
.
.P
  \fB\-\-couch\fR     Tolerate Couch DB
.
.P
  \fB\-\-debug\fR     Tolerate debugger statements
.
.P
  \fB\-\-devel\fR     Assume console,alert, \.\.\.
.
.P
  \fB\-\-eqeq\fR      Tolerate == and !=
.
.P
  \fB\-\-evil\fR      Tolerate eval
.
.P
  \fB\-\-forin\fR     Tolerate unfiltered for in
.
.P
  \fB\-\-indent\fR    Strict white space indentation
.
.P
  \fB\-\-maxerr\fR    Maximum number of errors
.
.P
  \fB\-\-maxlen\fR    Maximum line length
.
.P
  \fB\-\-newcap\fR    Tolerate uncapitalized constructors
.
.P
  \fB\-\-node\fR      Assume Node\.js
.
.P
  \fB\-\-nomen\fR     Tolerate dangling underscore in identifiers
.
.P
  \fB\-\-passfail\fR  Stop on first error
.
.P
  \fB\-\-plusplus\fR  Tolerate ++ and \-\-
.
.P
  \fB\-\-predef\fR    Declare additional predefined globals
.
.P
  \fB\-\-properties\fR Require all property names to be declared with /\fIproperties\fR/
.
.P
  \fB\-\-regexp\fR    Tolerate \. and [^\.\.\.]\. in /RegExp/
.
.P
  \fB\-\-rhino\fR     Assume Rhino
.
.P
  \fB\-\-sloppy\fR    Tolerate missing \'use strict\' pragma
.
.P
  \fB\-\-stupid\fR    Tolerate stupidity (typically, use of sync functions)
.
.P
  \fB\-\-sub\fR       Tolerate inefficient subscripting
.
.P
  \fB\-\-todo\fR      Tolerate TODO comments
.
.P
  \fB\-\-unparam\fR   Tolerate unused parameters
.
.P
  \fB\-\-vars\fR      Tolerate many var statements per function
.
.P
  \fB\-\-white\fR     Tolerate messy white space
.
.SH "EXAMPLES"
\fIMultiple files:\fR
.
.IP "" 4
.
.nf
jslint lib/color\.js lib/reporter\.js
.
.fi
.
.IP "" 0
.
.P
\fIAll JSLint options supported\fR
.
.IP "" 4
.
.nf
jslint \-\-white \-\-vars \-\-regexp lib/color\.js
.
.fi
.
.IP "" 0
.
.P
\fIDefaults to true, but you can specify false\fR
.
.IP "" 4
.
.nf
jslint \-\-bitwise false lib/color\.js
.
.fi
.
.IP "" 0
.
.P
\fIPass arrays\fR
.
.IP "" 4
.
.nf
jslint \-\-predef $ \-\-predef Backbone lib/color\.js
.
.fi
.
.IP "" 0
.
.P
\fIJSLint your entire project\fR
.
.IP "" 4
.
.nf
jslint **/*\.js
.
.fi
.
.IP "" 0
.
.P
\fIUsing JSLint with a config file\fR
.
.IP "" 4
.
.nf
See FILES section\.
.
.fi
.
.IP "" 0
.
.SH "INSTALLATION"
To install jslint globally, use
.
.IP "" 4
.
.nf
npm install jslint \-g
.
.fi
.
.IP "" 0
.
.P
To install jslint locally, use
.
.IP "" 4
.
.nf
npm install jslint
.
.fi
.
.IP "" 0
.
.P
When installed locally, jslint can be run as
.
.IP "" 4
.
.nf
\|\./node_modules/\.bin/jslint
.
.fi
.
.IP "" 0
.
.SH "FILES"
node\-jslint can be configured using JSON in a \.jslintrc file\.
.
.P
The format of a jslint options file is a JSON file containing a single object
where the keys are jslint option names and the values are the option argument;
use \fBtrue\fR to enable and \fBfalse\fR to disable boolean options\. Example:
.
.IP "" 4
.
.nf
`~/project/\.jslintrc`
{
  "indent": 4,
  "predef": [
    "$"
  ],
  "node": true
}
.
.fi
.
.IP "" 0
.
.SH "PRECEDENCE"
The config is obtained by merging multiple configurations by this order of
precedence, where options closer to #1 on this list override others\.
.
.IP "1" 4
\fB/*jslint \.\.\. */\fR directives
.
.IP "2" 4
CLI args
.
.IP "3" 4
Local \.jslintrc located in a linted file\'s directory
.
.IP "4" 4
All \.jslintrc files upwards the directory tree
.
.IP "5" 4
\|\.jslintrc file located in user\'s home folder (\fB~\fR, or an environment variable \fBHOME\fR)
.
.IP "" 0
.
.SH "RETURN VALUES"
jslint returns 1 if it found any problems, 0 otherwise\.
.
.SH "AUTHOR"
JSLint is written and maintained by Douglas Crockford\. See douglascrockford/JSLint \fIhttps://github\.com/douglascrockford/JSLint\fR\|\.
.
.P
This package is node\-jslint, which provides a command\-line interface for running
jslint using the Node\.js platform\.  node\-jslint was written by Reid Burke and is
maintained by Reid Burke, Ryuichi Okumura, and Sam Mikes\.
.
.SH "BUGS"
There are no known bugs\.  Submit bugs here \fIhttps://github\.com/reid/node\-jslint/issues\fR\|\.
.
.P
Note that if you are reporting a problem with the way jslint works rather than
the way the command\-line tools work, we will probably refer you to the JSLint community \fIhttps://plus\.google\.com/communities/104441363299760713736\fR or
the issue tracker at douglascrockford/JSLint \fIhttps://github\.com/douglascrockford/JSLint/issues\fR\|\.
.
.SH "LICENSE"
See LICENSE file\.
