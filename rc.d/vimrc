set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'Haml'
Plugin 'Jasmine-snippets-for-snipMate'
Plugin 'Markdown'
Plugin 'Markdown-syntax'
Plugin 'Puppet-Syntax-Highlighting'
Plugin 'RubySinatra'
Plugin 'Vim-Rspec'
Plugin 'cocoa.vim'
" Plugin 'flymaker'
Plugin 'ftpluginruby.vim'
Plugin 'perl.vim'
Plugin 'rails.vim'
Plugin 'ruby.vim'
Plugin 'vim-addon-ruby-debug-ide'
Plugin 'vim-coffee-script'
Plugin 'xml.vim'

if has("lua")
  " Lua needed
  Plugin 'Shougo/neocomplete.vim'
else
  Plugin 'Shougo/neocomplcache.vim'
endif

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'Rip-Rip/clang_complete'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'Shougo/neosnippet.vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'digitaltoad/vim-jade'
Plugin 'docunext/closetag.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'fatih/vim-go'
Plugin 'garbas/vim-snipmate'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
Plugin 'mtscout6/vim-cjsx'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'slim-template/vim-slim'
Plugin 'tomlion/vim-solidity'
Plugin 'tomtom/tlib_vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

autocmd filetype crontab setlocal nobackup nowritebackup
autocmd BufNewFile,BufRead *.cson set filetype=coffee

let s:clang_library_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'

if isdirectory(s:clang_library_path)
  let g:clang_library_path=s:clang_library_path
endif

" =================================================
" Editor
" =================================================

" set regexpengine=1
colorscheme Tomorrow-Night
filetype plugin indent on
retab
set autoindent
set bs=indent,eol,start
set cmdheight=1
set expandtab
set laststatus=1
set list
set listchars=tab:>_,trail:\.,nbsp:%,eol:\$
set notitle
set number
set ruler
set shiftwidth=2
set showcmd
set showmatch
set smartindent
set t_Co=256
set tabstop=2
set title
syntax enable

" =================================================
" autocmd
" =================================================

" Close XML tags
autocmd FileType html,erb,php,xml,xslt let b:closetag_html_style=1
autocmd FileType html,erb,php,xml,xslt source ~/.vim/bundle/closetag/plugin/closetag.vim

let g:vim_markdown_folding_disabled=1

" Highlight status line on edit mode
augroup InsertHook
  autocmd!
  autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
  autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

" Remove all trailing spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" =================================================
" Highlight
" =================================================

highlight LineNr     ctermfg=darkyellow
highlight NonText    ctermfg=darkblue   ctermbg=NONE guibg=darkgray
highlight Folded     ctermfg=blue
highlight SpecialKey ctermfg=235   ctermbg=NONE
highlight Pmenu      ctermbg=lightgray  ctermfg=23
highlight PmenuSel   ctermbg=black      ctermfg=yellow
highlight PmenuSbar  ctermbg=yellow
" Zenkaku Space
highlight ZenkakuSpace cterm=underline ctermfg=darkgray ctermbg=NONE
match ZenkakuSpace /ã€€/
" Hankaku Space
"highlight HankakuSpace cterm=underline ctermfg=darkgray ctermbg=NONE
"match HankakuSpace /\s/

" =================================================
" NeoComplCache
" =================================================

let g:acp_enableAtStartup = 0

if has("lua")
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
  " Close popup by <Enter>.
  inoremap <expr><Enter> pumvisible() ? "\<C-y>" : "\<Enter>"

  " AutoComplPop like behavior.
  let g:neocomplete#enable_auto_select = 1

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
  " Use neocomplcache.
  let g:neocomplcache_enable_at_startup = 1
  " Use smartcase.
  let g:neocomplcache_enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : ''
      \ }

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplcache#undo_completion()
  inoremap <expr><C-l>     neocomplcache#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplcache#smart_close_popup() . "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplcache#close_popup()
  inoremap <expr><C-e>  neocomplcache#cancel_popup()

  "Space to select items:
  inoremap <expr><Space> pumvisible() ? neocomplcache#smart_close_popup() : "\<Space>"
  "Enter to select items:
  inoremap <expr><Enter> pumvisible() ? neocomplcache#smart_close_popup() : "\<Enter>"
endif


" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" =================================================
" Go
" =================================================
set rtp+=$GOROOT/misc/vim
let g:go_fmt_command = "goimports"

" =================================================
" NERDTree
" =================================================
let NERDTreeShowHidden=1
